version: "3.9"

networks:
  mynetwork:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    networks:
      - mynetwork
    healthcheck:
      test: echo ruok | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    networks:
      - mynetwork
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # 단일 브로커 안정화 값
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run &
        sleep 10
        kafka-topics --bootstrap-server localhost:29092 \
          --create --if-not-exists --topic webtoon_user_events_v2 \
          --partitions 1 --replication-factor 1
        wait
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:29092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.5.2
  #   container_name: schema-registry
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   environment:
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #     SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: "1"
  #   ports:
  #     - "28081:8081"
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8081/subjects >/dev/null || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
    networks:
      - mynetwork
    restart: always
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      SERVER_PORT: 9000
      SERVER_ADDRESS: 0.0.0.0

  spark-master:
    build:
      context: ./docker/spark
      dockerfile: Dockerfile
    container_name: spark-master
    user: "1001:1001"
    env_file:
      - .env
    environment:
      - HOME=/opt/spark
      - USER=spark                            # 단순 리눅스 환경변수 (실제 리눅스 계정, 컨테이너 실행 권한과 관련 X)
      - HADOOP_USER_NAME=spark                # 내부적으로 HDFS API 호출 시, 권한 체크하는 Hadoop 계정
      - SPARK_SUBMIT=/opt/spark/bin/spark-submit
      - JAVA_TOOL_OPTIONS=-Duser.name=spark   # JVM 설정. 내부적으로 자바 코드 호출 시 참조하는 사용자 계정
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8080:8080"     # Web UI
      - "7077:7077"     # spark 클러스터 간 통신
    networks:
      - mynetwork
    volumes:
      - ./src/spark:/opt/workspace/src/spark
      - .env:/opt/workspace/.env
      - spark_ivy2:/opt/spark/.ivy2               # 의존성 jar 다운로드 하기 위한 폴더
      - ./spark/checkpoints:/opt/workspace/checkpoints
      - ./spark/data:/opt/workspace/data
    command: >
      bash -c "/opt/spark/sbin/start-master.sh && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark-worker:
    build:
      context: ./docker/spark
      dockerfile: Dockerfile
    container_name: spark-worker
    user: "1001:1001"
    depends_on:
      spark-master:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # - SPARK_MODE=worker
      # - SPARK_MASTER_URL=spark://spark-master:7077
      # - SPARK_WORKER_CORES=4
      # - SPARK_WORKER_MEMORY=4G
      # - SPARK_DRIVER_MEMORY=1G
      # - SPARK_EXECUTOR_MEMORY=1G
      - HOME=/opt/spark
      - USER=spark
      - HADOOP_USER_NAME=spark
      - JAVA_TOOL_OPTIONS=-Duser.name=spark
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8081:8081"
    networks:
      - mynetwork
    volumes:
      - ./src/spark:/opt/workspace/src/spark
      - .env:/opt/workspace/.env
      - spark_ivy2:/opt/spark/.ivy2
      - ./spark/checkpoints:/opt/workspace/checkpoints
      - ./spark/data:/opt/workspace/data
    command: >
      bash -c "/opt/spark/sbin/start-worker.sh spark://spark-master:7077 --cores 4 --memory 4G && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark-worker-2:
    build:
      context: ./docker/spark
      dockerfile: Dockerfile
    container_name: spark-worker-2
    user: "1001:1001"
    depends_on:
      spark-master:
        condition: service_healthy
    env_file:
      - .env
    environment:
      # - SPARK_MODE=worker
      # - SPARK_MASTER_URL=spark://spark-master:7077
      # - SPARK_WORKER_CORES=4
      # - SPARK_WORKER_MEMORY=4G
      # - SPARK_DRIVER_MEMORY=1G
      # - SPARK_EXECUTOR_MEMORY=1G
      - HOME=/opt/spark
      - USER=spark
      - HADOOP_USER_NAME=spark
      - JAVA_TOOL_OPTIONS=-Duser.name=spark
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "8082:8081"
    networks:
      - mynetwork
    volumes:
      - ./src/spark:/opt/workspace/src/spark
      - .env:/opt/workspace/.env
      - spark_ivy2:/opt/spark/.ivy2
      - ./spark/checkpoints:/opt/workspace/checkpoints
      - ./spark/data:/opt/workspace/data
    command: >
      bash -c "/opt/spark/sbin/start-worker.sh spark://spark-master:7077 --cores 4 --memory 4G && tail -f /dev/null"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 10s
      timeout: 5s
      retries: 5

  x-airflow-common: &airflow-common
    build:
      context: ./docker/airflow
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW_UID: ${AIRFLOW_UID}
      # For spark submit
      SPARK_MASTER: ${SPARK_MASTER}
      SPARK_CHECKPOINT_DIR: ${SPARK_CHECKPOINT_DIR}
      SPARK_PACKAGES: ${SPARK_PACKAGES}
    networks:
      - mynetwork
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
      - ./src/spark:/opt/workspace/src/spark
      - airflow_plugins:/opt/airflow/plugins
      - spark_ivy2:/opt/spark/.ivy2


  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db upgrade && \
        airflow users create \
          --username byeolong2 \
          --firstname Hanbyeol \
          --lastname Kim \
          --role Admin \
          --email hbstella92@gmail.com \
          --password adminadmin12
    depends_on:
      postgres:
        condition: service_healthy

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    depends_on:
      - postgres
      - airflow-init
    ports:
      - "8088:8080"
    restart: always
    command: webserver

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    depends_on:
      - postgres
      - airflow-init
    restart: always
    command: scheduler

  postgres:
    image: postgres:14
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - mynetwork
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      retries: 5
      interval: 10s
      timeout: 5s

volumes:
  pg_data:
  airflow_logs:
  airflow_plugins:
  spark_ivy2:
